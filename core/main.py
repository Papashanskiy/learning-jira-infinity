import logging
from typing import List
from datetime import datetime
from jira import JIRA, Issue
from apscheduler.schedulers.blocking import BlockingScheduler
from dotenv import load_dotenv
from groq import Groq
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
import time
import pytz

# Load environment variables from .env file
load_dotenv()

# Jira and OpenAI configuration
JIRA_URL = os.getenv("JIRA_URL")
JIRA_USER = os.getenv("JIRA_USER")
JIRA_TOKEN = os.getenv("JIRA_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
JIRA_BOARD_ID = int(os.getenv("JIRA_BOARD_ID"))
JIRA_PROJECT_KEY = os.getenv("JIRA_PROJECT_KEY", "PRO")  # Jira project key

# Status names in Jira workflow
STATUS_IN_PROGRESS = "In Progress"
STATUS_BACKLOG = "Backlog"
STATUS_DONE = "Done"

# Schedule: weekday -> list of (epic, topic)
PROJECT_SCHEDULE = {
    0: [("PRO-1", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), ("PRO-3", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")],
    1: [("PRO-1", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), ("PRO-4", "–°–∏—Å—Ç–µ–º –¥–∏–∑–∞–π–Ω")],
    2: [("PRO-1", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), ("PRO-5", "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")],
    3: [("PRO-1", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), ("PRO-6", "Python")],
    4: [("PRO-1", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), ("PRO-7", "ML Ops –∏ DevOps")],
}

# –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
SCHEDULER_TIMEZONE = os.getenv("SCHEDULER_TIMEZONE", "Asia/Almaty")
SCHEDULER_HOUR = int(os.getenv("SCHEDULER_HOUR", 8))
SCHEDULER_MINUTE = int(os.getenv("SCHEDULER_MINUTE", 0))
# —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "mon-fri" –∏–ª–∏ "0-4"
SCHEDULER_DAYS = os.getenv("SCHEDULER_DAYS", "mon-fri")

DRY_RUN = os.getenv("DRY_RUN", "false").lower() == "true"


def validate_config():
    required = [JIRA_URL, JIRA_USER, JIRA_TOKEN, GROQ_API_KEY, JIRA_BOARD_ID]
    if not all(required):
        missing = [name for name, val in zip(
            ["JIRA_URL", "JIRA_USER", "JIRA_TOKEN", "GROQ_API_KEY", "JIRA_BOARD_ID"], required) if not val]
        raise ValueError(f"Missing env vars: {', '.join(missing)}")


def init_clients() -> JIRA:
    validate_config()
    jira = JIRA(server=JIRA_URL, token_auth=(JIRA_USER, JIRA_TOKEN))
    groq_client = Groq(api_key=GROQ_API_KEY)
    return jira, groq_client


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=2, min=2, max=30),
    retry=retry_if_exception_type(Exception),
    reraise=True
)
def jira_search_issues(jira: JIRA, jql: str, maxResults: int = 1000):
    return jira.search_issues(jql, maxResults=maxResults)


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=2, min=2, max=30),
    retry=retry_if_exception_type(Exception),
    reraise=True
)
def jira_create_issue(jira: JIRA, fields: dict):
    return jira.create_issue(fields=fields)


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=2, min=2, max=30),
    retry=retry_if_exception_type(Exception),
    reraise=True
)
def jira_transition_issue(jira: JIRA, issue: Issue, transition_id):
    return jira.transition_issue(issue, transition_id)


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=2, min=2, max=30),
    retry=retry_if_exception_type(Exception),
    reraise=True
)
def jira_add_comment(jira: JIRA, issue_key: str, message: str):
    return jira.add_comment(issue_key, message)


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=2, min=2, max=30),
    retry=retry_if_exception_type(Exception),
    reraise=True
)
def jira_issue(jira: JIRA, issue_key: str):
    return jira.issue(issue_key)


def notify(jira: JIRA, issue_key: str, message: str):
    if DRY_RUN:
        logging.info(f"[DRY-RUN] Would add comment to {issue_key}: {message}")
        return
    try:
        jira_add_comment(jira, issue_key, message)
        logging.info(f"Notification added to {issue_key}")
    except Exception as e:
        logging.error(f"Failed to comment on {issue_key}: {e}", exc_info=True)


def call_groq_generate_content(groq_client: Groq, prompt: str) -> str:
    if DRY_RUN:
        logging.info(f"[DRY-RUN] Would call Groq API with prompt: {prompt}")
        return "# DRY-RUN\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (DRY-RUN)"
    chat_completion = groq_client.chat.completions.create(
        messages=[
            {
                "role": "user",
                "content": prompt,
            }
        ],
        model="meta-llama/llama-4-scout-17b-16e-instruct",
    )
    return chat_completion.choices[0].message.content


def generate_new_task(groq_client: Groq, topic_history: List[Issue], topic: str) -> dict:
    history_summary = [h.summary for h in topic_history]
    prompt = (
        f"–£ –º–µ–Ω—è —É–∂–µ –±—ã–ª–∏ —Ç–µ–º—ã: {', '.join(history_summary)}. "
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ä–∞–∑–¥–µ–ª—É '{topic}'. "
        "–ú–Ω–µ –Ω—É–∂–Ω–æ —ç—Ç–æ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é. "
        "–°–¥–µ–ª–∞–π —ç—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown, —á—Ç–æ–±—ã —è –º–æ–≥ "
        "–ª–µ–≥–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ Jira. "
        "–ú–µ—Ç–∏—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–æ–±—å–µ–º–ª—é—â–∏–º –∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é "
        "–ø–æ–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–º—É, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. "
        "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —è –æ–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è —Å–º–æ–≥—É —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å. "
        "–ù—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è —Ç–µ–º–æ–π. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '# –¢–µ–º–∞'. "
        "–ß—Ç–æ–±—ã —è –º–æ–≥ –¥–æ—Å—Ç–∞—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º summary = content.splitlines()[0].lstrip('# ').strip()"
    )
    try:
        content = call_groq_generate_content(groq_client, prompt)
        summary = content.splitlines()[0].lstrip('# ').strip()
        return {"summary": summary, "description": content}
    except Exception as e:
        logging.error(f"Groq API error after retries: {e}", exc_info=True)
        raise


def get_topic_history(jira: JIRA, epic_key: str, topic: str) -> List[Issue]:
    try:
        jql = (
            f'project = {JIRA_PROJECT_KEY} '
            f'AND status = "{STATUS_DONE}" '
            f'AND parent = {epic_key} '
            'ORDER BY updated DESC'
        )
        issues = jira_search_issues(jira, jql, maxResults=1000)
        return [issue for issue in issues]
    except Exception as e:
        logging.error(
            f"Error fetching history for {epic_key}: {e}", exc_info=True)
        return []


def transition_issue_to_status(jira: JIRA, issue: Issue, status_name: str):
    if DRY_RUN:
        logging.info(
            f"[DRY-RUN] Would transition issue {issue.key} to '{status_name}'")
        return
    try:
        transitions = jira.transitions(issue)
        transition_id = next(
            t['id'] for t in transitions if t['name'] == status_name
        )
        jira_transition_issue(jira, issue, transition_id)
        logging.info(f"Issue {issue.key} transitioned to '{status_name}'")
    except StopIteration:
        logging.error(
            f"No transition found for status '{status_name}' on issue {issue.key}", exc_info=True)
    except Exception as e:
        logging.error(
            f"Failed to transition issue {issue.key}: {e}", exc_info=True)


def epic_exists(jira: JIRA, epic_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ø–∏–∫ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–Ω."""
    try:
        epic = jira_issue(jira, epic_key)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞
        return True
    except Exception as e:
        logging.error(
            f"Epic {epic_key} not found or inaccessible: {e}", exc_info=True)
        return False


def notify_critical_error(message: str):
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram/Slack –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    logging.error(f"CRITICAL: {message}")


def process_project(jira: JIRA, groq_client: Groq, epic_key: str, topic: str, history: List[Issue]):
    try:
        if not epic_exists(jira, epic_key):
            msg = f"Skipping topic '{topic}' because epic '{epic_key}' does not exist or is inaccessible."
            logging.error(msg)
            notify_critical_error(msg)
            return

        # Check "In Progress" tasks in the epic
        jql_ip = (
            f'project = {JIRA_PROJECT_KEY} '
            f'AND status = "{STATUS_IN_PROGRESS}" '
            f'AND parent = {epic_key}'
        )
        ip_issues = jira_search_issues(jira, jql_ip)
        if ip_issues:
            key = ip_issues[0].key
            # TODO —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã gpt –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–ª–∞ –∫–∞–∫ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç
            notify(
                jira,
                key,
                (
                    f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –ø–æ —Ç–µ–º–µ '{topic}' –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ'! "
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è ‚Äî —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ üöÄ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, "
                    "–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏—Ö –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä—è–º–æ –≤ –∑–∞–¥–∞—á–µ. –í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º –∏ —É—Å–ø–µ—Ö–∞–º! üí°"
                )
            )
            return

        # Move backlog task to In Progress
        jql_bl = (
            f'project = {JIRA_PROJECT_KEY} '
            f'AND status = "{STATUS_BACKLOG}" '
            f'AND parent = {epic_key} '
            'ORDER BY priority DESC'
        )
        bl_issues = jira_search_issues(jira, jql_bl)
        if bl_issues:
            issue = bl_issues[0]
            transition_issue_to_status(jira, issue, STATUS_IN_PROGRESS)
            notify(
                jira,
                issue.key,
                (
                    f"–ó–∞–¥–∞—á–∞ –ø–æ —Ç–µ–º–µ '{topic}' –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ'. "
                    "–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ! –£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è üöÄ"
                )
            )
            return

        # Idempotency: check if a similar task already exists (not Done)
        jql_check = (
            f'project = {JIRA_PROJECT_KEY} '
            f'AND summary ~ "{topic}" '
            f'AND parent = {epic_key} '
            f'AND status != "{STATUS_DONE}"'
        )
        existing = jira_search_issues(jira, jql_check)
        if existing:
            msg = f"Task for topic '{topic}' already exists in epic '{epic_key}', skipping creation."
            logging.info(msg)
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ
            return

        # Create a new task under the epic
        task = generate_new_task(groq_client, history, topic)
        if DRY_RUN:
            logging.info(
                f"[DRY-RUN] Would create issue in epic '{epic_key}' with summary '{task['summary']}'")
            return

        new_issue = jira_create_issue(jira, {
            'project': {'key': epic_key.split('-')[0]},
            'parent': {'key': epic_key},
            'summary': task['summary'],
            'description': task['description'],
            'issuetype': {'name': 'Task'}
        })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
        if not new_issue or not hasattr(new_issue, "key"):
            msg = f"Failed to create new issue for topic '{topic}' in epic '{epic_key}'"
            logging.error(msg, exc_info=True)
            notify_critical_error(msg)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
        transition_issue_to_status(jira, new_issue, STATUS_IN_PROGRESS)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –Ω—É–∂–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
        updated_issue = jira_issue(jira, new_issue.key)
        if getattr(updated_issue.fields.status, "name", None) != STATUS_IN_PROGRESS:
            msg = f"Issue {new_issue.key} did not transition to '{STATUS_IN_PROGRESS}'"
            logging.error(msg, exc_info=True)
            notify_critical_error(msg)
        else:
            notify(jira, new_issue.key, f"Created and moved new {topic} task.")
    except Exception as e:
        msg = f"Error processing {epic_key}: {e}"
        logging.error(msg, exc_info=True)
        notify_critical_error(msg)


def run_daily():
    jira, groq_client = init_clients()
    today = datetime.today().weekday()
    for epic, topic in PROJECT_SCHEDULE.get(today, []):
        history = get_topic_history(jira, epic, topic)
        process_project(jira, groq_client, epic, topic, history)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(levelname)s - %(message)s')
    validate_config()
    scheduler = BlockingScheduler(timezone=pytz.timezone(SCHEDULER_TIMEZONE))
    scheduler.add_job(
        run_daily,
        'cron',
        day_of_week=SCHEDULER_DAYS,
        hour=SCHEDULER_HOUR,
        minute=SCHEDULER_MINUTE,
        misfire_grace_time=3600
    )
    logging.info("Starting Jira automation...")
    scheduler.start()
